###
# fermat
# -------
# Copyright (c)2010-2011 Daniel Fiser <danfis@danfis.cz>
#
#  This file is part of fermat.
#
#  Distributed under the OSI-approved BSD License (the "License");
#  see accompanying file BDS-LICENSE for details or see
#  <http://www.opensource.org/licenses/bsd-license.php>.
#
#  This software is distributed WITHOUT ANY WARRANTY; without even the
#  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the License for more information.
##

CC ?= gcc
CXX ?= g++
M4 ?= m4
SED ?= sed
FLEX ?= flex
PYTHON ?= python
PYTHON2 ?= python2
PYTHON3 ?= python3
CYTHON  ?= cython
SCAN_BUILD ?= scan-build

PYTHON_CONFIG ?= python-config

CC_NOT_GCC = no

SYSTEM = $(shell uname)

SYSTEM_CXXFLAGS =
SYSTEM_LDFLAGS =
CONFIG_FLAGS =

ifeq '$(SYSTEM)' 'FreeBSD'
  SYSTEM_CXXFLAGS = -Wno-long-long
  SED ?= gsed
else
endif

NOWALL ?= no
NOPEDANTIC ?= no
DEBUG ?= no
PROFIL ?= no

ifeq '$(CC_NOT_GCC)' 'yes'
  NOPEDANTIC := yes
endif

ifeq '$(PROFIL)' 'yes'
  DEBUG = yes
endif

ifeq '$(DEBUG)' 'yes'
  CFLAGS = -g
  CXXFLAGS = -g
  CONFIG_FLAGS += -DDEBUG
else
  # force to use optimizations
  CFLAGS += -O3
  CXXFLAGS += -O3
endif
ifeq '$(PROFIL)' 'yes'
  CFLAGS += -pg
  CXXFLAGS += -pg
endif

ifneq '$(NOWALL)' 'yes'
  CFLAGS += -Wall
  CXXFLAGS += -Wall
  ifeq '$(DEBUG)' 'yes'
    CFLAGS   += -Wno-unused-function
    CXXFLAGS += -Wno-unused-function
  endif
endif
ifneq '$(NOPEDANTIC)' 'yes'
  CFLAGS += -pedantic
  CXXFLAGS += -pedantic
endif

ifeq '$(USE_SINGLE)' ''
ifeq '$(USE_DOUBLE)' ''
  USE_DOUBLE ?= no
  USE_SINGLE ?= yes
endif
endif

USE_MEMCHECK ?= no

USE_SSE    ?= no
USE_OPENCL ?= auto
USE_RAPID  ?= auto
USE_ODE    ?= auto
USE_SDL    ?= auto
USE_SDL_IMAGE ?= auto


ifeq '$(USE_SINGLE)' 'yes'
  CONFIG_FLAGS += -DUSE_SINGLE
  USE_DOUBLE = no
endif
ifeq '$(USE_DOUBLE)' 'yes'
  CONFIG_FLAGS += -DUSE_DOUBLE
  USE_OPENCL := no
endif
ifeq '$(USE_MEMCHECK)' 'yes'
  CONFIG_FLAGS += -DUSE_MEMCHECK
endif
ifeq '$(USE_SSE)' 'yes'
  CONFIG_FLAGS += -DUSE_SSE
  CFLAGS += -msse3
  CXXFLAGS += -msse3
endif


ifeq '$(USE_OPENCL)' 'auto'
  ifeq '$(OPENCL_CFLAGS)' ''
    USE_OPENCL = $(shell if test -f /usr/lib/libOpenCL.so; then echo "yes"; else echo "no"; fi;)
  else
    USE_OPENCL = yes
  endif
endif

ifeq '$(USE_OPENCL)' 'yes'
  OPENCL_CFLAGS  ?=
  OPENCL_LDFLAGS ?= -lOpenCL
  CONFIG_FLAGS += -DUSE_OPENCL
endif


ifeq '$(USE_RAPID)' 'auto'
  ifeq '$(RAPID_CFLAGS)' ''
    USE_RAPID = $(shell if test -f /usr/lib/libRAPID.a; then echo "yes"; else echo "no"; fi;)
  else
    USE_RAPID = yes
  endif
endif

RAPID_CFLAGS   ?=
RAPID_LDFLAGS  ?= -lRAPID
ifeq '$(USE_RAPID)' 'yes'
  RAPID_CFLAGS += -DHAVE_RAPID
else
  RAPID_CFLAGS  :=
  RAPID_LDFLAGS :=
endif

ifeq '$(USE_ODE)' 'auto'
  ifeq '$(ODE_CFLAGS)' ''
    USE_ODE = $(shell if ode-config --version >/dev/null 2>&1; then echo 'yes'; else echo 'no'; fi)
  else
    USE_ODE = yes
  endif
ODE_CFLAGS  ?= $(shell ode-config --cflags)
ODE_LDFLAGS ?= $(shell ode-config --libs)
ODE_DRAWSTUFF ?= -ldrawstuff -lX11 -lGL -lGLU
endif

ifeq '$(USE_SDL)' 'auto'
  ifeq '$(SDL_CFLAGS)' ''
    USE_SDL = $(shell if pkg-config sdl --exists; then echo 'yes'; else echo 'no'; fi)
  else
    USE_SDL = yes
  endif

SDL_CFLAGS  ?= $(shell pkg-config sdl --cflags)
SDL_LDFLAGS ?= $(shell pkg-config sdl --libs)
endif

ifeq '$(USE_SDL)' 'auto'
  ifeq '$(SDL_CFLAGS)' ''
    USE_SDL = $(shell if pkg-config sdl --exists; then echo 'yes'; else echo 'no'; fi)
  else
    USE_SDL = yes
  endif

SDL_CFLAGS  ?= $(shell pkg-config sdl --cflags)
SDL_LDFLAGS ?= $(shell pkg-config sdl --libs)
endif

ifeq '$(USE_SDL_IMAGE)' 'auto'
  ifeq '$(SDL_IMAGE_CFLAGS)' ''
    USE_SDL_IMAGE = $(shell if pkg-config SDL_image --exists; then echo 'yes'; else echo 'no'; fi)
  else
    USE_SDL_IMAGE = yes
  endif

SDL_IMAGE_CFLAGS  ?= $(shell pkg-config SDL_image --cflags)
SDL_IMAGE_LDFLAGS ?= $(shell pkg-config SDL_image --libs)
endif


EXAMPLES ?= no
BINS     ?= yes


# for testing
USE_OZCOLLIDE ?= no
OZCOLLIDE_CFLAGS ?=
OZCOLLIDE_LDFLAGS ?= -lozcollide


ifneq '$(CC_NOT_GCC)' 'yes'
  CFLAGS += -std=gnu99 -ffast-math
endif
LDFLAGS += -pthread
LDFLAGS += $(SYSTEM_LDFLAGS)


PYTHON_CFLAGS  ?= $(shell $(PYTHON_CONFIG) --includes)
PYTHON_LDFLAGS ?= $(shell $(PYTHON_CONFIG) --libs)

CD_TIME_MEASURE ?= no
ifeq '$(CD_TIME_MEASURE)' 'yes'
  CONFIG_FLAGS += -DCD_TIME_MEASURE
endif

CHECKTARGETS = 
check-dep: $(CHECKTARGETS)

PREFIX     ?= /usr/local
INCLUDEDIR ?= include
LIBDIR     ?= lib

.DEFAULT_GOAL := all
